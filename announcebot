#!/usr/bin/env python

import mediorc
from zmqfan import zmqsub
import sys
import throttle_lib

class AnnounceBot(mediorc.IRC) :
	def __init__(self, server, nick, chan, client, throttler) :
		self.client = client
		self.throttler = throttler
		mediorc.IRC.__init__(self, server, nick, chan)
	
	def on_join(self, c, e) :
		self.initialize_pinger()

	def on_pubmsg(self, c, e) :
		nick = e.source().split("!")[0]
		chan = e.target()
		txt = e.arguments()[0]

		spl = txt.split(' ', 1)
		
		if len(spl) == 2 and spl[0] == '!say':
			if not self.throttler.check() :
				self.connection.privmsg(chan, "Slow up, bub.")
				return

			self.client.send({
				'text' : spl[1],
				'pitch' : 0
			})

			self.connection.privmsg(chan, "It is spoken.")

class AnnounceThread(mediorc.IRCThread) :
	def __init__(self, server, nick, chan, client, throttler) :
		self.bot_create = lambda: AnnounceBot(server, nick, chan, client, throttler)
		mediorc.IRCThread.__init__(self)

if __name__ == '__main__' :
	try :
		server = sys.argv[1]
		nick = sys.argv[2]
		chan = sys.argv[3]
		announce_url = sys.argv[4]
		
		thr_count = None
		thr_period = None
		thr_set = None
		try :
			thr_count = int(sys.argv[5])
			thr_period = int(sys.argv[6])
			thr_set = (thr_count, thr_period)
		except IndexError :
			if thr_count is not None :
				raise

		client = zmqsub.JSONZMQConnectPub(announce_url)
		throttler = throttle_lib.Throttler(thr_set)
		
		s = AnnounceThread(server, nick, chan, client, throttler)
	except IndexError :
		print 'usage: announcebot <server> <nick> <channel> <announce_url> [<thr_count> <thr_period>]'
		sys.exit(1)
	
	s.run()
